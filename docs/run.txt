############################
Collect and run healthchecks
############################

Given :doc:`you have healthchecks </write>`, there are two main ways to
collect and run healthchecks:

1. run a shell command:

   * using `hospital.cli`_;
   * using `nose`_.

2. perform GET requests to a web service: using `hospital.wsgi`_...

   * with `Chaussette`_, `Gunicorn`_ or `Circus`_;
   * with `twod.wsgi and Django`_;
   * as `a (basic) standalone server <hospital.wsgi>`_.

If you want to setup another runner, notice that you can use the
:func:`~hospital.core.is_healthcheck` function to verify whether an object is
a healthcheck or not.


************
hospital.cli
************

You can use :mod:`hospital.cli` to collect and run healthchecks:

.. code:: console

   $ python -m hospital.cli hospital.healthchecks.predictable
   .
   ----------------------------------------------------------------------
   Ran 1 test in 0.001s

   OK

See ``python -m hospital.cli --help`` for detailed usage and options.


****
Nose
****

Here are guidelines to collect and run healthchecks with `Nose test runner`_.
In the examples below, we run health checks of `hospital` project.

.. code:: console

   $ nosetests --all-modules --attr='is_healthcheck' hospital.healthchecks.predictable
   .
   ----------------------------------------------------------------------
   Ran 1 test in 0.001s
   
   OK

Reciprocally, you may want to skip healthchecks when you run tests.
With `nose`, it could be:

.. code:: console

   $ nosetests --all-modules --attr='!is_healthcheck' hospital.healthchecks
   
   ----------------------------------------------------------------------
   Ran 0 tests in 0.000s

   OK

.. tip::

   `--all-modules option`_ makes Nose collect tests in all modules. Without the
   option, it would have collected modules or packages named "tests", and not
   "healthchecks".


*************
hospital.wsgi
*************

:mod:`hospital.wsgi` embeds a basic HTTP server:

.. code:: console

   $ python -m hospital.wsgi hospital.healthchecks.predictable
   Serving on 0.0.0.0 port 1515...

See ``python -m hospital.wsgi --help`` for detailed usage and options.

Each time you perform a GET on the server's root, healthchecks are
collected and run.

The status code of the response is 200 in case all healthchecks passed, else it
is 500.

.. code:: console

   $ curl -X GET -I http://localhost:1515/
   HTTP/1.0 200 OK
   Date: Fri, 28 Feb 2014 13:19:08 GMT
   Server: WSGIServer/0.1 Python/2.7.5+
   Content-Type: application/json; charset=utf-8
   Content-Length: 520

The output is JSON:

.. code:: json

   {
       "status": "pass",
       "details": [
           {
               "test": "Health checks are collected.",
               "status": "pass"
           }
       ],
       "summary": {
           "skip": 0,
           "pass": 1,
           "expected_failure": 0,
           "error": 0,
           "fail": 0,
           "total": 1,
           "unexpected_success": 0
       }
   }


********
Gunicorn
********

You can use :data:`hospital.wsgi.application` WSGI endpoint with `Gunicorn`.
Setup the list of healthchecks to run in ``HEALTHCHECKS`` environment variable
(space separated).

.. code:: console

   export HEALTHCHECKS='hospital.healthchecks.predictable'
   gunicorn -w 4 hospital.wsgi:application

Which can also be written in a single line:

.. code:: console

   HEALTHCHECKS='hospital.healthchecks.predictable' gunicorn -w 4 hospital.wsgi:application

See `Gunicorn documentation`_ for details.


**********
Chaussette
**********

You can use :data:`hospital.wsgi.application` WSGI endpoint with `Chaussette`.
Setup the list of healthchecks to run in ``HEALTHCHECKS`` environment variable
(space separated).

.. code:: console

   export HEALTHCHECKS='hospital.healthchecks.predictable'
   chaussette hospital.wsgi.application

Which can also be written in a single line:

.. code:: console

   HEALTHCHECKS='hospital.healthchecks.predictable' chaussette hospital.wsgi.application

See `Chaussette documentation`_ for details.


******
Circus
******

Here is a sample `Circus` configuration serving
"hospital.healthchecks.predictable" healthchecks on port 2014, using
`Chaussette` and a virtual environnement.

.. code:: ini

   [watcher:yourproject-healthchecks]
   # Service command.
   cmd = bin/chaussette --fd $(circus.sockets.yourproject-healthchecks) hospital.wsgi.application
   numprocesses = 1
   use_sockets = True
   copy_env = True
   working_dir = path/to/your-virtualenv
   # Stdout logs.
   stdout_stream.class = FileStream
   stdout_stream.filename = /var/log/chaussette/wsgi_healthchecks_out.log
   stdout_stream.time_format = [%Y/%m/%d | %H:%M:%S]
   # Stderr logs.
   stderr_stream.class = FileStream
   stderr_stream.filename = /var/log/chaussette/wsgi_healthchecks_err.log
   stderr_stream.time_format = [%Y/%m/%d | %H:%M:%S]

   [socket:yourproject-healthchecks]
   host = 127.0.0.1
   port = 2014

   [env:yourproject-healthchecks]
   HEALTHCHECKS = hospital.healthchecks.predictable

See `Circus documentation`_ for details.


********************
twod.wsgi and Django
********************

You can use `twod.wsgi` and :class:`hospital.wsgi.HealthCheckApp` to serve
healthchecks with `Django`_. In your project's :file:`urls.py` module:

.. code:: python

   from django.core.urlresolvers import patterns
   from twod.wsgi import make_wsgi_view
   from hospital.wsgi import HealthCheckApp

   urlpatterns = patterns('',
       # ...
       (r'^healthchecks(/.*)$', make_wsgi_view(HealthCheckApp(discover=['hospital.healthchecks.predictable']))),
       # ...
   )

See `twod.wsgi documentation`_ for details.


.. rubric:: Notes & references

.. target-notes::

.. _`nose test runner`: https://nose.readthedocs.org/
.. _`--all-modules option`:
   http://nose.readthedocs.org/en/latest/usage.html#cmdoption--all-modules
.. _`Gunicorn documentation`: http://gunicorn.org/
.. _`Chaussette documentation`: https://chaussette.readthedocs.org/
.. _`Circus documentation`: http://circus.readthedocs.org/en/latest/
.. _`Django`: https://www.djangoproject.com/
.. _`twod.wsgi documentation`: https://pythonhosted.org/twod.wsgi/embedded-apps.html
